     1                                  BOOT_LOAD equ 0x7c00 ; ブートプログラムのロード位置
     2                                  ORG BOOT_LOAD ; ロードアドレスをアセンブラに指示
     3                                  
     4                                  ;-------------
     5                                  ; マクロ
     6                                  ;-------------
     7                                  %include "../include/macro.s"
     8                              <1> %macro  cdecl 1-*.nolist
     9                              <1> 
    10                              <1>     %rep %0 - 1
    11                              <1>         push    %{-1:-1}
    12                              <1>         %rotate -1
    13                              <1>     %endrep
    14                              <1>     %rotate -1 ; 関数の位置を第一引数にする
    15                              <1>         call    %1 ; 関数を呼び出す
    16                              <1>     %if 1 < %0 ; 引数を持つ場合
    17                              <1>         add     sp, (__BITS__ >> 3) * (%0 - 1)  ; SPの位置を元に戻す。
    18                              <1>                                                 ; __BITS__はレジスタのbit幅を表す。
    19                              <1>                                                 ; これをシフト演算により8で割る。(16bitなら2, 32bitなら4)
    20                              <1>                                                 ; その数字に 引数の数をかけた分だけスタックポインタの位置を戻す。
    21                              <1>     %endif
    22                              <1> 
    23                              <1> %endmacro
     8                                  
     9                                  ;-------------
    10                                  ; エントリーポイント
    11                                  ;-------------
    12                                  entry:
    13 00000000 EB58                        jmp ipl ; IPLへジャンプ
    14                                  
    15                                      ; BPB(BIOS Parameter Block)
    16 00000002 90<rep 58h>                 times 90 - ($ - $$) db 0x90 ; NOPで90バイト分のBPB領域を埋める
    17                                      
    18                                  
    19                                  ipl: ; IPL(Initial Program Loader)
    20                                  
    21                                      ; セグメントレジスタを設定する
    22 0000005A FA                          cli ; 割り込みを禁止する
    23 0000005B B80000                      mov ax, 0x0000 ; AX=0x0000
    24 0000005E 8ED8                        mov ds, ax ; DS=0x0000
    25 00000060 8EC0                        mov es, ax ; ES=0x0000
    26 00000062 8ED0                        mov ss, ax ; ss=0x0000
    27 00000064 BC007C                      mov sp, BOOT_LOAD ; sp=0x7c00
    28                                  
    29 00000067 FB                          sti ; セグメントレジスタの初期化が終わったので、割り込みを許可する
    30                                  
    31 00000068 8816[8600]                  mov [BOOT.DRIVE], dl ; ブートドライブを保存
    32                                      
    33                                      ; 文字を表示
    34 0000006C 6A58E8170083C402            cdecl   putc, word 'X'
    35 00000074 6A59E80F0083C402            cdecl   putc, word 'Y'
    36 0000007C 6A5AE8070083C402            cdecl   putc, word 'Z'
    37                                      
    38                                      ; 処理の終了
    39 00000084 EBFE                        jmp $ ; while(1); 無限ループ
    40                                  
    41                                  ALIGN 2, db 0
    42                                  BOOT: ; ブートドライブに関する情報
    43 00000086 0000                    .DRIVE: dw 0 ; ドライブ番号を保存する場所。(アセンブル段階では0を記入しておく)
    44                                  
    45                                  ;-------------
    46                                  ; モジュール
    47                                  ;-------------
    48                                  %include    "../modules/real/putc.s"
    49                              <1> putc:
    50                              <1>     ; スタックフレームの構築
    51 00000088 55                  <1>     push    bp              ;   +4| 出力文字、引数
    52 00000089 89E5                <1>     mov     bp, sp          ;   +2| 呼び出し元のアドレス
    53                              <1>                             ; BP+0| 元のBP
    54                              <1> 
    55                              <1>     ; レジスタの保存
    56 0000008B 50                  <1>     push    ax
    57 0000008C 53                  <1>     push    bx
    58                              <1> 
    59                              <1>     ; 処理の開始
    60 0000008D 8A4604              <1>     mov     al, [bp+4]      ; 出力文字を取得
    61 00000090 B40E                <1>     mov     ah, 0x0E        ; テレタイプ式1文字入力
    62 00000092 BB0000              <1>     mov     bx, 0x0000      ; ページ番号と文字色を0に設定
    63 00000095 CD10                <1>     int     0x10            ; ビデオBIOSコール
    64                              <1> 
    65                              <1>     ; レジスタの復帰
    66 00000097 5B                  <1>     pop     bx
    67 00000098 58                  <1>     pop     ax
    68                              <1> 
    69                              <1>     ; スタックフレームの破棄
    70 00000099 89EC                <1>     mov     sp, bp
    71 0000009B 5D                  <1>     pop     bp
    72                              <1> 
    73 0000009C C3                  <1>     ret
    49                                  
    50                                  ; ブートフラグ
    51 0000009D 00<rep 161h>                times 510 - ($ - $$) db 0x00 ; 510バイト目まで0x00で埋める
    52 000001FE 55AA                        db 0x55, 0xAA ; ブートフラグ
    53                                  
    54                                  
